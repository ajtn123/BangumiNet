// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.Legacy.Models
{
    /// <summary>
    /// 人物信息
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Legacy_MonoInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>别名（另外添加出来的 key 为 0 开始的数字）</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo_alias? Alias { get; set; }
#nullable restore
#else
        public global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo_alias Alias { get; set; }
#endif
        /// <summary>生日</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Birth { get; set; }
#nullable restore
#else
        public string Birth { get; set; }
#endif
        /// <summary>声优</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cv { get; set; }
#nullable restore
#else
        public string Cv { get; set; }
#endif
        /// <summary>性别</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Gender { get; set; }
#nullable restore
#else
        public string Gender { get; set; }
#endif
        /// <summary>身高</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Height { get; set; }
#nullable restore
#else
        public string Height { get; set; }
#endif
        /// <summary>简体中文名</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameCn { get; set; }
#nullable restore
#else
        public string NameCn { get; set; }
#endif
        /// <summary>引用来源</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source? Source { get; set; }
#nullable restore
#else
        public global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source Source { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo"/> and sets the default values.
        /// </summary>
        public Legacy_MonoInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alias", n => { Alias = n.GetObjectValue<global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo_alias>(global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo_alias.CreateFromDiscriminatorValue); } },
                { "birth", n => { Birth = n.GetStringValue(); } },
                { "cv", n => { Cv = n.GetStringValue(); } },
                { "gender", n => { Gender = n.GetStringValue(); } },
                { "height", n => { Height = n.GetStringValue(); } },
                { "name_cn", n => { NameCn = n.GetStringValue(); } },
                { "source", n => { Source = n.GetObjectValue<global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source>(global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo_alias>("alias", Alias);
            writer.WriteStringValue("birth", Birth);
            writer.WriteStringValue("cv", Cv);
            writer.WriteStringValue("gender", Gender);
            writer.WriteStringValue("height", Height);
            writer.WriteStringValue("name_cn", NameCn);
            writer.WriteObjectValue<global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source>("source", Source);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>, List&lt;string&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Legacy_MonoInfo_source : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? LegacyMonoInfoSourceString { get; set; }
#nullable restore
#else
            public string LegacyMonoInfoSourceString { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;string&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<string>? String { get; set; }
#nullable restore
#else
            public List<string> String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::BangumiNet.Api.Legacy.Models.Legacy_MonoInfo.Legacy_MonoInfo_source();
                if(parseNode.GetStringValue() is string legacyMonoInfoSourceStringValue)
                {
                    result.LegacyMonoInfoSourceString = legacyMonoInfoSourceStringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<string>()?.AsList() is List<string> stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(LegacyMonoInfoSourceString != null)
                {
                    writer.WriteStringValue(null, LegacyMonoInfoSourceString);
                }
                else if(String != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<string>(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
