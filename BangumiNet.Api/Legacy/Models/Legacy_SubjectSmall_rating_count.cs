// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
using BangumiNet.Api.Interfaces;
namespace BangumiNet.Api.Legacy.Models
{
    /// <summary>
    /// 各分值评分人数
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Legacy_SubjectSmall_rating_count : IAdditionalDataHolder, IParsable, IRatingCount
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Eight property</summary>
        public int? Eight { get; set; }
        /// <summary>The Five property</summary>
        public int? Five { get; set; }
        /// <summary>The Four property</summary>
        public int? Four { get; set; }
        /// <summary>The Nine property</summary>
        public int? Nine { get; set; }
        /// <summary>The One property</summary>
        public int? One { get; set; }
        /// <summary>The OneZero property</summary>
        public int? OneZero { get; set; }
        /// <summary>The Seven property</summary>
        public int? Seven { get; set; }
        /// <summary>The Six property</summary>
        public int? Six { get; set; }
        /// <summary>The Three property</summary>
        public int? Three { get; set; }
        /// <summary>The Two property</summary>
        public int? Two { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_rating_count"/> and sets the default values.
        /// </summary>
        public Legacy_SubjectSmall_rating_count()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_rating_count"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_rating_count CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_rating_count();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "8", n => { Eight = n.GetIntValue(); } },
                { "5", n => { Five = n.GetIntValue(); } },
                { "4", n => { Four = n.GetIntValue(); } },
                { "9", n => { Nine = n.GetIntValue(); } },
                { "1", n => { One = n.GetIntValue(); } },
                { "10", n => { OneZero = n.GetIntValue(); } },
                { "7", n => { Seven = n.GetIntValue(); } },
                { "6", n => { Six = n.GetIntValue(); } },
                { "3", n => { Three = n.GetIntValue(); } },
                { "2", n => { Two = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("8", Eight);
            writer.WriteIntValue("5", Five);
            writer.WriteIntValue("4", Four);
            writer.WriteIntValue("9", Nine);
            writer.WriteIntValue("1", One);
            writer.WriteIntValue("10", OneZero);
            writer.WriteIntValue("7", Seven);
            writer.WriteIntValue("6", Six);
            writer.WriteIntValue("3", Three);
            writer.WriteIntValue("2", Two);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
