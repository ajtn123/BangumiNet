// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.Legacy.Models
{
    /// <summary>
    /// 收藏人数
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Legacy_SubjectSmall_collection : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>做过</summary>
        public int? Collect { get; set; }
        /// <summary>在做</summary>
        public int? Doing { get; set; }
        /// <summary>抛弃</summary>
        public int? Dropped { get; set; }
        /// <summary>搁置</summary>
        public int? OnHold { get; set; }
        /// <summary>想做</summary>
        public int? Wish { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_collection"/> and sets the default values.
        /// </summary>
        public Legacy_SubjectSmall_collection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_collection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_collection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.Legacy.Models.Legacy_SubjectSmall_collection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "collect", n => { Collect = n.GetIntValue(); } },
                { "doing", n => { Doing = n.GetIntValue(); } },
                { "dropped", n => { Dropped = n.GetIntValue(); } },
                { "on_hold", n => { OnHold = n.GetIntValue(); } },
                { "wish", n => { Wish = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("collect", Collect);
            writer.WriteIntValue("doing", Doing);
            writer.WriteIntValue("dropped", Dropped);
            writer.WriteIntValue("on_hold", OnHold);
            writer.WriteIntValue("wish", Wish);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
