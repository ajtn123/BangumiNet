// <auto-generated/>
#pragma warning disable CS0618
using BangumiNet.Api.V0.Models;
using BangumiNet.Api.V0.V0.Indices.Item.Subjects.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BangumiNet.Api.V0.V0.Indices.Item.Subjects
{
    /// <summary>
    /// Builds and executes requests for operations under \v0\indices\{index_id}\subjects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SubjectsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the BangumiNet.Api.V0.v0.indices.item.subjects.item collection</summary>
        /// <param name="position">条目 ID</param>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.Item.WithSubject_ItemRequestBuilder"/></returns>
        public global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.Item.WithSubject_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("subject_id", position);
                return new global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.Item.WithSubject_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the BangumiNet.Api.V0.v0.indices.item.subjects.item collection</summary>
        /// <param name="position">条目 ID</param>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.Item.WithSubject_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.Item.WithSubject_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("subject_id", position);
                return new global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.Item.WithSubject_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubjectsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v0/indices/{index_id}/subjects{?limit*,offset*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubjectsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v0/indices/{index_id}/subjects{?limit*,offset*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// Get Index Subjects
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BangumiNet.Api.V0.Models.ErrorDetail">When receiving a 400 status code</exception>
        /// <exception cref="global::BangumiNet.Api.V0.Models.ErrorDetail">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::BangumiNet.Api.V0.Models.ErrorDetail.CreateFromDiscriminatorValue },
                { "404", global::BangumiNet.Api.V0.Models.ErrorDetail.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add a subject to Index
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">新增某条目到目录的请求信息</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BangumiNet.Api.V0.Models.ErrorDetail">When receiving a 400 status code</exception>
        /// <exception cref="global::BangumiNet.Api.V0.Models.ErrorDetail">When receiving a 401 status code</exception>
        /// <exception cref="global::BangumiNet.Api.V0.Models.ErrorDetail">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PostAsync(global::BangumiNet.Api.V0.Models.IndexSubjectAddInfo body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PostAsync(global::BangumiNet.Api.V0.Models.IndexSubjectAddInfo body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::BangumiNet.Api.V0.Models.ErrorDetail.CreateFromDiscriminatorValue },
                { "401", global::BangumiNet.Api.V0.Models.ErrorDetail.CreateFromDiscriminatorValue },
                { "404", global::BangumiNet.Api.V0.Models.ErrorDetail.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Index Subjects
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Add a subject to Index
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">新增某条目到目录的请求信息</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::BangumiNet.Api.V0.Models.IndexSubjectAddInfo body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::BangumiNet.Api.V0.Models.IndexSubjectAddInfo body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get Index Subjects
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubjectsRequestBuilderGetQueryParameters 
        {
            /// <summary>分页参数</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>分页参数</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>条目类型</summary>
            [QueryParameter("type")]
            public int? Type { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubjectsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::BangumiNet.Api.V0.V0.Indices.Item.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubjectsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
