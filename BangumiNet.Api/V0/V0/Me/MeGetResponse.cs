// <auto-generated/>
#pragma warning disable CS0618
using BangumiNet.Api.V0.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.V0.V0.Me
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MeGetResponse : global::BangumiNet.Api.V0.Models.User, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>用户绑定的邮箱地址</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>用户注册时间。比如 2017-12-03T08:51:16+08:00</summary>
        public DateTimeOffset? RegTime { get; set; }
        /// <summary>用户设置的时区偏移，以小时为单位。比如 GMT+8（shanghai/beijing）为 8</summary>
        public int? TimeOffset { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.V0.Me.MeGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::BangumiNet.Api.V0.V0.Me.MeGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.V0.V0.Me.MeGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "email", n => { Email = n.GetStringValue(); } },
                { "reg_time", n => { RegTime = n.GetDateTimeOffsetValue(); } },
                { "time_offset", n => { TimeOffset = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("email", Email);
            writer.WriteDateTimeOffsetValue("reg_time", RegTime);
            writer.WriteIntValue("time_offset", TimeOffset);
        }
    }
}
#pragma warning restore CS0618
