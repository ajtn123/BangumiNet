// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.V0.V0.Search.Subjects
{
    /// <summary>
    /// 不同条件之间是 `且` 的关系
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SubjectsPostRequestBody_filter : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>播出日期/发售日期，日期必需为 `YYYY-MM-DD` 格式。多值之间为 `且` 关系。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AirDate { get; set; }
#nullable restore
#else
        public List<string> AirDate { get; set; }
#endif
        /// <summary>公共标签。多个值之间为 `且` 关系。可以用 `-` 排除标签。比如 `-科幻` 可以排除科幻标签。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MetaTags { get; set; }
#nullable restore
#else
        public List<string> MetaTags { get; set; }
#endif
        /// <summary>无权限的用户会直接忽略此字段，不会返回R18条目。默认或者 `null` 会返回包含 R18 的所有搜索结果。`true` 只会返回 R18 条目。`false` 只会返回非 R18 条目。</summary>
        public bool? Nsfw { get; set; }
        /// <summary>用于搜索指定排名的条目，多值之间为 `且` 关系。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Rank { get; set; }
#nullable restore
#else
        public List<string> Rank { get; set; }
#endif
        /// <summary>用于搜索指定评分的条目，多值之间为 `且` 关系。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Rating { get; set; }
#nullable restore
#else
        public List<string> Rating { get; set; }
#endif
        /// <summary>标签，可以多次出现。多值之间为 `且` 关系。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tag { get; set; }
#nullable restore
#else
        public List<string> Tag { get; set; }
#endif
        /// <summary>条目类型，参照 `SubjectType` enum，多值之间为 `或` 的关系。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Type { get; set; }
#nullable restore
#else
        public List<int?> Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.V0.V0.Search.Subjects.SubjectsPostRequestBody_filter"/> and sets the default values.
        /// </summary>
        public SubjectsPostRequestBody_filter()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.V0.Search.Subjects.SubjectsPostRequestBody_filter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.V0.V0.Search.Subjects.SubjectsPostRequestBody_filter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.V0.V0.Search.Subjects.SubjectsPostRequestBody_filter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "air_date", n => { AirDate = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "meta_tags", n => { MetaTags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "nsfw", n => { Nsfw = n.GetBoolValue(); } },
                { "rank", n => { Rank = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "rating", n => { Rating = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tag", n => { Tag = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("air_date", AirDate);
            writer.WriteCollectionOfPrimitiveValues<string>("meta_tags", MetaTags);
            writer.WriteBoolValue("nsfw", Nsfw);
            writer.WriteCollectionOfPrimitiveValues<string>("rank", Rank);
            writer.WriteCollectionOfPrimitiveValues<string>("rating", Rating);
            writer.WriteCollectionOfPrimitiveValues<string>("tag", Tag);
            writer.WriteCollectionOfPrimitiveValues<int?>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
