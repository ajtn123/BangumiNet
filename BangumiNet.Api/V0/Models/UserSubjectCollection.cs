// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.V0.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserSubjectCollection : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The comment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The ep_status property</summary>
        public int? EpStatus { get; set; }
        /// <summary>The private property</summary>
        public bool? Private { get; set; }
        /// <summary>The rate property</summary>
        public int? Rate { get; set; }
        /// <summary>The subject property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BangumiNet.Api.V0.Models.SlimSubject? Subject { get; set; }
#nullable restore
#else
        public global::BangumiNet.Api.V0.Models.SlimSubject Subject { get; set; }
#endif
        /// <summary>The subject_id property</summary>
        public int? SubjectId { get; set; }
        /// <summary>条目类型- `1` 为 书籍- `2` 为 动画- `3` 为 音乐- `4` 为 游戏- `6` 为 三次元没有 `5`</summary>
        public int? SubjectType { get; set; }
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>- `1`: 想看- `2`: 看过- `3`: 在看- `4`: 搁置- `5`: 抛弃</summary>
        public int? Type { get; set; }
        /// <summary>本时间并不代表条目的收藏时间。修改评分，评价，章节观看状态等收藏信息时未更新此时间是一个 bug。请不要依赖此特性</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>The vol_status property</summary>
        public int? VolStatus { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.V0.Models.UserSubjectCollection"/> and sets the default values.
        /// </summary>
        public UserSubjectCollection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.Models.UserSubjectCollection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.V0.Models.UserSubjectCollection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.V0.Models.UserSubjectCollection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "comment", n => { Comment = n.GetStringValue(); } },
                { "ep_status", n => { EpStatus = n.GetIntValue(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "rate", n => { Rate = n.GetIntValue(); } },
                { "subject", n => { Subject = n.GetObjectValue<global::BangumiNet.Api.V0.Models.SlimSubject>(global::BangumiNet.Api.V0.Models.SlimSubject.CreateFromDiscriminatorValue); } },
                { "subject_id", n => { SubjectId = n.GetIntValue(); } },
                { "subject_type", n => { SubjectType = n.GetIntValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetIntValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "vol_status", n => { VolStatus = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("comment", Comment);
            writer.WriteIntValue("ep_status", EpStatus);
            writer.WriteBoolValue("private", Private);
            writer.WriteIntValue("rate", Rate);
            writer.WriteObjectValue<global::BangumiNet.Api.V0.Models.SlimSubject>("subject", Subject);
            writer.WriteIntValue("subject_id", SubjectId);
            writer.WriteIntValue("subject_type", SubjectType);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteIntValue("type", Type);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteIntValue("vol_status", VolStatus);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
