// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.V0.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SlimSubject : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>收藏人数</summary>
        public int? CollectionTotal { get; set; }
        /// <summary>air date in `YYYY-MM-DD` format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>由旧服务端从wiki中解析，对于书籍条目为`话数`</summary>
        public int? Eps { get; set; }
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The images property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BangumiNet.Api.V0.Models.Images? Images { get; set; }
#nullable restore
#else
        public global::BangumiNet.Api.V0.Models.Images Images { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The name_cn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameCn { get; set; }
#nullable restore
#else
        public string NameCn { get; set; }
#endif
        /// <summary>排名</summary>
        public int? Rank { get; set; }
        /// <summary>分数</summary>
        public double? Score { get; set; }
        /// <summary>截短后的条目描述。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortSummary { get; set; }
#nullable restore
#else
        public string ShortSummary { get; set; }
#endif
        /// <summary>前 10 个 tag</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BangumiNet.Api.V0.Models.Collections>? Tags { get; set; }
#nullable restore
#else
        public List<global::BangumiNet.Api.V0.Models.Collections> Tags { get; set; }
#endif
        /// <summary>The type property</summary>
        public int? Type { get; set; }
        /// <summary>书籍条目的册数，由旧服务端从wiki中解析</summary>
        public int? Volumes { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.V0.Models.SlimSubject"/> and sets the default values.
        /// </summary>
        public SlimSubject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.Models.SlimSubject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.V0.Models.SlimSubject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.V0.Models.SlimSubject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "collection_total", n => { CollectionTotal = n.GetIntValue(); } },
                { "date", n => { Date = n.GetStringValue(); } },
                { "eps", n => { Eps = n.GetIntValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "images", n => { Images = n.GetObjectValue<global::BangumiNet.Api.V0.Models.Images>(global::BangumiNet.Api.V0.Models.Images.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "name_cn", n => { NameCn = n.GetStringValue(); } },
                { "rank", n => { Rank = n.GetIntValue(); } },
                { "score", n => { Score = n.GetDoubleValue(); } },
                { "short_summary", n => { ShortSummary = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfObjectValues<global::BangumiNet.Api.V0.Models.Collections>(global::BangumiNet.Api.V0.Models.Collections.CreateFromDiscriminatorValue)?.AsList(); } },
                { "type", n => { Type = n.GetIntValue(); } },
                { "volumes", n => { Volumes = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("collection_total", CollectionTotal);
            writer.WriteStringValue("date", Date);
            writer.WriteIntValue("eps", Eps);
            writer.WriteIntValue("id", Id);
            writer.WriteObjectValue<global::BangumiNet.Api.V0.Models.Images>("images", Images);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("name_cn", NameCn);
            writer.WriteIntValue("rank", Rank);
            writer.WriteDoubleValue("score", Score);
            writer.WriteStringValue("short_summary", ShortSummary);
            writer.WriteCollectionOfObjectValues<global::BangumiNet.Api.V0.Models.Collections>("tags", Tags);
            writer.WriteIntValue("type", Type);
            writer.WriteIntValue("volumes", Volumes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
