// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.V0.Models
{
    /// <summary>
    /// 所有的字段均可选
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UserSubjectCollectionModifyPayload : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>评价</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>只能用于修改书籍条目进度</summary>
        public int? EpStatus { get; set; }
        /// <summary>仅自己可见</summary>
        public bool? Private { get; set; }
        /// <summary>评分，`0` 表示删除评分</summary>
        public int? Rate { get; set; }
        /// <summary>不传或者 `null` 都会被忽略，传 `[]` 则会删除所有 tag。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>修改条目收藏类型</summary>
        public int? Type { get; set; }
        /// <summary>只能用于修改书籍条目进度</summary>
        public int? VolStatus { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.V0.Models.UserSubjectCollectionModifyPayload"/> and sets the default values.
        /// </summary>
        public UserSubjectCollectionModifyPayload()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.Models.UserSubjectCollectionModifyPayload"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.V0.Models.UserSubjectCollectionModifyPayload CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.V0.Models.UserSubjectCollectionModifyPayload();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "comment", n => { Comment = n.GetStringValue(); } },
                { "ep_status", n => { EpStatus = n.GetIntValue(); } },
                { "private", n => { Private = n.GetBoolValue(); } },
                { "rate", n => { Rate = n.GetIntValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetIntValue(); } },
                { "vol_status", n => { VolStatus = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("comment", Comment);
            writer.WriteIntValue("ep_status", EpStatus);
            writer.WriteBoolValue("private", Private);
            writer.WriteIntValue("rate", Rate);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteIntValue("type", Type);
            writer.WriteIntValue("vol_status", VolStatus);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
