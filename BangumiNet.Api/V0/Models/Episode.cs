// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.V0.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Episode : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The airdate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Airdate { get; set; }
#nullable restore
#else
        public string Airdate { get; set; }
#endif
        /// <summary>The comment property</summary>
        public int? Comment { get; set; }
        /// <summary>简介</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Desc { get; set; }
#nullable restore
#else
        public string Desc { get; set; }
#endif
        /// <summary>音乐曲目的碟片数</summary>
        public int? Disc { get; set; }
        /// <summary>维基人填写的原始时长</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Duration { get; set; }
#nullable restore
#else
        public string Duration { get; set; }
#endif
        /// <summary>服务器解析的时长，无法解析时为 `0`</summary>
        public int? DurationSeconds { get; set; }
        /// <summary>条目内的集数, 从`1`开始。非本篇剧集的此字段无意义</summary>
        public double? Ep { get; set; }
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The name_cn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameCn { get; set; }
#nullable restore
#else
        public string NameCn { get; set; }
#endif
        /// <summary>同类条目的排序和集数</summary>
        public double? Sort { get; set; }
        /// <summary>`0` 本篇，`1` SP，`2` OP，`3` ED</summary>
        public int? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.V0.Models.Episode"/> and sets the default values.
        /// </summary>
        public Episode()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.V0.Models.Episode"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.V0.Models.Episode CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.V0.Models.Episode();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "airdate", n => { Airdate = n.GetStringValue(); } },
                { "comment", n => { Comment = n.GetIntValue(); } },
                { "desc", n => { Desc = n.GetStringValue(); } },
                { "disc", n => { Disc = n.GetIntValue(); } },
                { "duration", n => { Duration = n.GetStringValue(); } },
                { "duration_seconds", n => { DurationSeconds = n.GetIntValue(); } },
                { "ep", n => { Ep = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "name_cn", n => { NameCn = n.GetStringValue(); } },
                { "sort", n => { Sort = n.GetDoubleValue(); } },
                { "type", n => { Type = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("airdate", Airdate);
            writer.WriteIntValue("comment", Comment);
            writer.WriteStringValue("desc", Desc);
            writer.WriteIntValue("disc", Disc);
            writer.WriteStringValue("duration", Duration);
            writer.WriteIntValue("duration_seconds", DurationSeconds);
            writer.WriteDoubleValue("ep", Ep);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("name_cn", NameCn);
            writer.WriteDoubleValue("sort", Sort);
            writer.WriteIntValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
