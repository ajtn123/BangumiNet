// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.P1.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SubjectSearchFilter : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Date { get; set; }
#nullable restore
#else
        public List<string> Date { get; set; }
#endif
        /// <summary>The metaTags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MetaTags { get; set; }
#nullable restore
#else
        public List<string> MetaTags { get; set; }
#endif
        /// <summary>无权限的用户会直接忽略此字段，不会返回 R18 条目。`null` 或者 `true` 会返回包含 R18 的所有搜索结果。`false` 只会返回非 R18 条目。</summary>
        public bool? Nsfw { get; set; }
        /// <summary>The rank property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Rank { get; set; }
#nullable restore
#else
        public List<string> Rank { get; set; }
#endif
        /// <summary>The rating property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Rating { get; set; }
#nullable restore
#else
        public List<string> Rating { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Type { get; set; }
#nullable restore
#else
        public List<int?> Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.Models.SubjectSearchFilter"/> and sets the default values.
        /// </summary>
        public SubjectSearchFilter()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.Models.SubjectSearchFilter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.P1.Models.SubjectSearchFilter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.P1.Models.SubjectSearchFilter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "date", n => { Date = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "metaTags", n => { MetaTags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "nsfw", n => { Nsfw = n.GetBoolValue(); } },
                { "rank", n => { Rank = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "rating", n => { Rating = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("date", Date);
            writer.WriteCollectionOfPrimitiveValues<string>("metaTags", MetaTags);
            writer.WriteBoolValue("nsfw", Nsfw);
            writer.WriteCollectionOfPrimitiveValues<string>("rank", Rank);
            writer.WriteCollectionOfPrimitiveValues<string>("rating", Rating);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteCollectionOfPrimitiveValues<int?>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
