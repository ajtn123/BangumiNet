// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.P1.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Episode : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The airdate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Airdate { get; set; }
#nullable restore
#else
        public string Airdate { get; set; }
#endif
        /// <summary>The collection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BangumiNet.Api.P1.Models.Episode_collection? Collection { get; set; }
#nullable restore
#else
        public global::BangumiNet.Api.P1.Models.Episode_collection Collection { get; set; }
#endif
        /// <summary>The comment property</summary>
        public int? Comment { get; set; }
        /// <summary>The desc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Desc { get; set; }
#nullable restore
#else
        public string Desc { get; set; }
#endif
        /// <summary>The disc property</summary>
        public int? Disc { get; set; }
        /// <summary>The duration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Duration { get; set; }
#nullable restore
#else
        public string Duration { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nameCN property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameCN { get; set; }
#nullable restore
#else
        public string NameCN { get; set; }
#endif
        /// <summary>The sort property</summary>
        public double? Sort { get; set; }
        /// <summary>The subject property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BangumiNet.Api.P1.Models.SlimSubject? Subject { get; set; }
#nullable restore
#else
        public global::BangumiNet.Api.P1.Models.SlimSubject Subject { get; set; }
#endif
        /// <summary>The subjectID property</summary>
        public int? SubjectID { get; set; }
        /// <summary>话数类型  - 0 = 本篇  - 1 = 特别篇  - 2 = OP  - 3 = ED  - 4 = 预告/宣传/广告  - 5 = MAD  - 6 = 其他</summary>
        public int? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.Models.Episode"/> and sets the default values.
        /// </summary>
        public Episode()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.Models.Episode"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.P1.Models.Episode CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.P1.Models.Episode();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "airdate", n => { Airdate = n.GetStringValue(); } },
                { "collection", n => { Collection = n.GetObjectValue<global::BangumiNet.Api.P1.Models.Episode_collection>(global::BangumiNet.Api.P1.Models.Episode_collection.CreateFromDiscriminatorValue); } },
                { "comment", n => { Comment = n.GetIntValue(); } },
                { "desc", n => { Desc = n.GetStringValue(); } },
                { "disc", n => { Disc = n.GetIntValue(); } },
                { "duration", n => { Duration = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nameCN", n => { NameCN = n.GetStringValue(); } },
                { "sort", n => { Sort = n.GetDoubleValue(); } },
                { "subject", n => { Subject = n.GetObjectValue<global::BangumiNet.Api.P1.Models.SlimSubject>(global::BangumiNet.Api.P1.Models.SlimSubject.CreateFromDiscriminatorValue); } },
                { "subjectID", n => { SubjectID = n.GetIntValue(); } },
                { "type", n => { Type = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("airdate", Airdate);
            writer.WriteObjectValue<global::BangumiNet.Api.P1.Models.Episode_collection>("collection", Collection);
            writer.WriteIntValue("comment", Comment);
            writer.WriteStringValue("desc", Desc);
            writer.WriteIntValue("disc", Disc);
            writer.WriteStringValue("duration", Duration);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("nameCN", NameCN);
            writer.WriteDoubleValue("sort", Sort);
            writer.WriteObjectValue<global::BangumiNet.Api.P1.Models.SlimSubject>("subject", Subject);
            writer.WriteIntValue("subjectID", SubjectID);
            writer.WriteIntValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
