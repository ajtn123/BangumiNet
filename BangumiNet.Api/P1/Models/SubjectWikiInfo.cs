// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.P1.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SubjectWikiInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The availablePlatform property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::BangumiNet.Api.P1.Models.WikiPlatform>? AvailablePlatform { get; set; }
#nullable restore
#else
        public List<global::BangumiNet.Api.P1.Models.WikiPlatform> AvailablePlatform { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The infobox property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Infobox { get; set; }
#nullable restore
#else
        public string Infobox { get; set; }
#endif
        /// <summary>The metaTags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MetaTags { get; set; }
#nullable restore
#else
        public List<string> MetaTags { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nsfw property</summary>
        public bool? Nsfw { get; set; }
        /// <summary>The platform property</summary>
        public int? Platform { get; set; }
        /// <summary>The series property</summary>
        public bool? Series { get; set; }
        /// <summary>The summary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Summary { get; set; }
#nullable restore
#else
        public string Summary { get; set; }
#endif
        /// <summary>条目类型  - 1 = 书籍  - 2 = 动画  - 3 = 音乐  - 4 = 游戏  - 6 = 三次元  没有 5</summary>
        public int? TypeID { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.Models.SubjectWikiInfo"/> and sets the default values.
        /// </summary>
        public SubjectWikiInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.Models.SubjectWikiInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.P1.Models.SubjectWikiInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.P1.Models.SubjectWikiInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "availablePlatform", n => { AvailablePlatform = n.GetCollectionOfObjectValues<global::BangumiNet.Api.P1.Models.WikiPlatform>(global::BangumiNet.Api.P1.Models.WikiPlatform.CreateFromDiscriminatorValue)?.AsList(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "infobox", n => { Infobox = n.GetStringValue(); } },
                { "metaTags", n => { MetaTags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nsfw", n => { Nsfw = n.GetBoolValue(); } },
                { "platform", n => { Platform = n.GetIntValue(); } },
                { "series", n => { Series = n.GetBoolValue(); } },
                { "summary", n => { Summary = n.GetStringValue(); } },
                { "typeID", n => { TypeID = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::BangumiNet.Api.P1.Models.WikiPlatform>("availablePlatform", AvailablePlatform);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("infobox", Infobox);
            writer.WriteCollectionOfPrimitiveValues<string>("metaTags", MetaTags);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("nsfw", Nsfw);
            writer.WriteIntValue("platform", Platform);
            writer.WriteBoolValue("series", Series);
            writer.WriteStringValue("summary", Summary);
            writer.WriteIntValue("typeID", TypeID);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
