// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace BangumiNet.Api.P1.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BlogEntry : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The content property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Content { get; set; }
#nullable restore
#else
        public string Content { get; set; }
#endif
        /// <summary>The createdAt property</summary>
        public int? CreatedAt { get; set; }
        /// <summary>The icon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Icon { get; set; }
#nullable restore
#else
        public string Icon { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The noreply property</summary>
        public int? Noreply { get; set; }
        /// <summary>The public property</summary>
        public bool? Public { get; set; }
        /// <summary>The related property</summary>
        public int? Related { get; set; }
        /// <summary>The replies property</summary>
        public int? Replies { get; set; }
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The type property</summary>
        public int? Type { get; set; }
        /// <summary>The uid property</summary>
        public int? Uid { get; set; }
        /// <summary>The updatedAt property</summary>
        public int? UpdatedAt { get; set; }
        /// <summary>The user property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::BangumiNet.Api.P1.Models.SlimUser? User { get; set; }
#nullable restore
#else
        public global::BangumiNet.Api.P1.Models.SlimUser User { get; set; }
#endif
        /// <summary>The views property</summary>
        public int? Views { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.Models.BlogEntry"/> and sets the default values.
        /// </summary>
        public BlogEntry()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.Models.BlogEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::BangumiNet.Api.P1.Models.BlogEntry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::BangumiNet.Api.P1.Models.BlogEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "content", n => { Content = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetIntValue(); } },
                { "icon", n => { Icon = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "noreply", n => { Noreply = n.GetIntValue(); } },
                { "public", n => { Public = n.GetBoolValue(); } },
                { "related", n => { Related = n.GetIntValue(); } },
                { "replies", n => { Replies = n.GetIntValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "type", n => { Type = n.GetIntValue(); } },
                { "uid", n => { Uid = n.GetIntValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetIntValue(); } },
                { "user", n => { User = n.GetObjectValue<global::BangumiNet.Api.P1.Models.SlimUser>(global::BangumiNet.Api.P1.Models.SlimUser.CreateFromDiscriminatorValue); } },
                { "views", n => { Views = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("content", Content);
            writer.WriteIntValue("createdAt", CreatedAt);
            writer.WriteStringValue("icon", Icon);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("noreply", Noreply);
            writer.WriteBoolValue("public", Public);
            writer.WriteIntValue("related", Related);
            writer.WriteIntValue("replies", Replies);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("title", Title);
            writer.WriteIntValue("type", Type);
            writer.WriteIntValue("uid", Uid);
            writer.WriteIntValue("updatedAt", UpdatedAt);
            writer.WriteObjectValue<global::BangumiNet.Api.P1.Models.SlimUser>("user", User);
            writer.WriteIntValue("views", Views);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
