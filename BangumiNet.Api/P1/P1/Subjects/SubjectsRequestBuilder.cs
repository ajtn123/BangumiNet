// <auto-generated/>
#pragma warning disable CS0618
using BangumiNet.Api.P1.Models;
using BangumiNet.Api.P1.P1.Subjects.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BangumiNet.Api.P1.P1.Subjects
{
    /// <summary>
    /// Builds and executes requests for operations under \p1\subjects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SubjectsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The minus property</summary>
        public global::BangumiNet.Api.P1.P1.Subjects.Minus_RequestBuilder Minus
        {
            get => new global::BangumiNet.Api.P1.P1.Subjects.Minus_RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the BangumiNet.Api.P1.p1.subjects.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Subjects.Item.WithSubjectItemRequestBuilder"/></returns>
        public global::BangumiNet.Api.P1.P1.Subjects.Item.WithSubjectItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("subjectID", position);
                return new global::BangumiNet.Api.P1.P1.Subjects.Item.WithSubjectItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the BangumiNet.Api.P1.p1.subjects.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Subjects.Item.WithSubjectItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::BangumiNet.Api.P1.P1.Subjects.Item.WithSubjectItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("subjectID", position);
                return new global::BangumiNet.Api.P1.P1.Subjects.Item.WithSubjectItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubjectsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/p1/subjects{?cat*,month*,page*,series*,sort*,tags*,type*,year*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SubjectsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/p1/subjects{?cat*,month*,page*,series*,sort*,tags*,type*,year*}", rawUrl)
        {
        }
        /// <summary>
        /// 获取条目列表
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Subjects.SubjectsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BangumiNet.Api.P1.Models.ErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BangumiNet.Api.P1.P1.Subjects.SubjectsGetResponse?> GetAsSubjectsGetResponseAsync(Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BangumiNet.Api.P1.P1.Subjects.SubjectsGetResponse> GetAsSubjectsGetResponseAsync(Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::BangumiNet.Api.P1.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::BangumiNet.Api.P1.P1.Subjects.SubjectsGetResponse>(requestInfo, global::BangumiNet.Api.P1.P1.Subjects.SubjectsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 获取条目列表
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Subjects.SubjectsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BangumiNet.Api.P1.Models.ErrorResponse">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsSubjectsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BangumiNet.Api.P1.P1.Subjects.SubjectsResponse?> GetAsync(Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BangumiNet.Api.P1.P1.Subjects.SubjectsResponse> GetAsync(Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::BangumiNet.Api.P1.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::BangumiNet.Api.P1.P1.Subjects.SubjectsResponse>(requestInfo, global::BangumiNet.Api.P1.P1.Subjects.SubjectsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 获取条目列表
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// 获取条目列表
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubjectsRequestBuilderGetQueryParameters 
        {
            /// <summary>每种条目类型分类不同，具体参考 https://github.com/bangumi/common 的 subject_platforms.yaml</summary>
            [QueryParameter("cat")]
            public int? Cat { get; set; }
            /// <summary>月份</summary>
            [QueryParameter("month")]
            public int? Month { get; set; }
            /// <summary>min 1</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>是否为系列，仅对书籍类型的条目有效</summary>
            [QueryParameter("series")]
            public bool? Series { get; set; }
            [Obsolete("This property is deprecated, use SortAsSubjectBrowseSort instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            [QueryParameter("sort")]
            public global::BangumiNet.Api.P1.Models.SubjectBrowseSort? SortAsSubjectBrowseSort { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tags")]
            public string[]? Tags { get; set; }
#nullable restore
#else
            [QueryParameter("tags")]
            public string[] Tags { get; set; }
#endif
            [QueryParameter("type")]
            public int? Type { get; set; }
            /// <summary>年份</summary>
            [QueryParameter("year")]
            public int? Year { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubjectsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::BangumiNet.Api.P1.P1.Subjects.SubjectsRequestBuilder.SubjectsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
