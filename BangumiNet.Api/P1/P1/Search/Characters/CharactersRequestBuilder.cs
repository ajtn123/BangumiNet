// <auto-generated/>
#pragma warning disable CS0618
using BangumiNet.Api.P1.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BangumiNet.Api.P1.P1.Search.Characters
{
    /// <summary>
    /// Builds and executes requests for operations under \p1\search\characters
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CharactersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CharactersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/p1/search/characters{?limit*,offset*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CharactersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/p1/search/characters{?limit*,offset*}", rawUrl)
        {
        }
        /// <summary>
        /// 搜索角色
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Search.Characters.CharactersPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BangumiNet.Api.P1.Models.ErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersPostResponse?> PostAsCharactersPostResponseAsync(global::BangumiNet.Api.P1.Models.SearchCharacter body, Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder.CharactersRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersPostResponse> PostAsCharactersPostResponseAsync(global::BangumiNet.Api.P1.Models.SearchCharacter body, Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder.CharactersRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::BangumiNet.Api.P1.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersPostResponse>(requestInfo, global::BangumiNet.Api.P1.P1.Search.Characters.CharactersPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 搜索角色
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Search.Characters.CharactersResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BangumiNet.Api.P1.Models.ErrorResponse">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsCharactersPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersResponse?> PostAsync(global::BangumiNet.Api.P1.Models.SearchCharacter body, Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder.CharactersRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersResponse> PostAsync(global::BangumiNet.Api.P1.Models.SearchCharacter body, Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder.CharactersRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::BangumiNet.Api.P1.Models.ErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersResponse>(requestInfo, global::BangumiNet.Api.P1.P1.Search.Characters.CharactersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 搜索角色
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::BangumiNet.Api.P1.Models.SearchCharacter body, Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder.CharactersRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::BangumiNet.Api.P1.Models.SearchCharacter body, Action<RequestConfiguration<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder.CharactersRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// 搜索角色
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CharactersRequestBuilderPostQueryParameters 
        {
            /// <summary>max 100</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>min 0</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CharactersRequestBuilderPostRequestConfiguration : RequestConfiguration<global::BangumiNet.Api.P1.P1.Search.Characters.CharactersRequestBuilder.CharactersRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
